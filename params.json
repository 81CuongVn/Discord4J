{"name":"Discord4j","tagline":"Java interface for the Discord API","body":"# Discord4J  [![Build Status](https://drone.io/github.com/austinv11/Discord4J/status.png)](https://drone.io/github.com/austinv11/Discord4J/latest) [![Download](https://jitpack.io/v/austinv11/Discord4j.svg?style=flat-square)](https://jitpack.io/#austinv11/Discord4j)\r\n\r\nJava interface for the unofficial [Discord](https://discordapp.com/) API, written in Java 8.\r\n[The API is also available in a few other languages.](https://discordapi.com/unofficial/libs.html)\r\n\r\nFor the latest dev builds, [download it from my ci server.](https://drone.io/github.com/austinv11/Discord4J/files)\r\n\r\n## Adding Discord4J as a dependency for a project\r\nGiven that `@VERSION@` = the a version of Discord4J (this can either be a release version, the short commit hash or `dev-SNAPSHOT`).\r\n### With maven\r\nIn your `pom.xml` add:\r\n```xml\r\n...\r\n<repositories>\r\n  ...\r\n  <repository>\r\n    <id>jitpack.io</id>\r\n    <url>https://jitpack.io</url>\r\n  </repository>\r\n</repositories>\r\n...\r\n<dependencies>\r\n  ...\r\n  <dependency>\r\n    <groupId>com.github.austinv11</groupId>\r\n    <artifactId>Discord4j</artifactId>\r\n    <version>@VERSION@</version>\r\n   <!-- <classifier>shaded</classifier> <!-- Include this line if you want a shaded jar (all the Discord4J dependencies bundled into one jar)-->\r\n  </dependency>\r\n</dependencies>\r\n...\r\n```\r\n### With Gradle\r\nIn your `build.gradle` add:\r\n```groovy\r\n...\r\nrepositories {\r\n  ...\r\n  maven {\r\n    url  \"https://jitpack.io\"\r\n  }\r\n}\r\n...\r\ndependencies {\r\n  ...\r\n  compile \"com.github.austinv11:Discord4j:@VERSION@\"\r\n  //compile \"com.github.austinv11:Discord4j:@VERSION@:shaded\" //Use this line instead of the one above it if you want a shaded jar (all the Discord4J dependencies bundled into one jar)\r\n}\r\n...\r\n```\r\n## So, how do I use this?\r\n### Starting with the API\r\nThe very first thing you need to do is obtain a \"DiscordClient\" object. This can be done by using the `ClientBuilder`.\r\nExample:\r\n```java\r\npublic class Example {\r\n\r\n  public static IDiscordClient getClient(String email, String password, boolean login) { //Returns an instance of the discord client\r\n    ClientBuilder clientBuilder = new ClientBuilder(); //Creates the ClientBuilder instance\r\n    clientBuilder.withLogin(email, password); //Adds the login info to the builder\r\n    if (login) {\r\n      return clientBuilder.login(); //Creates the client instance and logs the client in\r\n    } else {\r\n      return clientBuilder.build(); //Creates the client instance but it doesn't log the client in yet, you would have to call client.login() yourself\r\n    }\r\n  }\r\n}\r\n```\r\n### Events\r\nThe Discord4J library is very event driven. Your bot can detect these events through the use of an event listener. There are two ways of creating an event listener:\r\n1. Using `IListener`:\r\n```java\r\npublic class InterfaceListener implements IListener<ReadyEvent> { //The event type in IListener<> can be any class which extends Event\r\n  \r\n  @Override\r\n  public void handle(ReadyEvent event) { //This is called when the ReadyEvent is dispatched\r\n    doCoolStuff();\r\n  }\r\n}\r\n```\r\n2. Using the `@EventSubscriber` annotation:\r\n```java\r\npublic class AnnotationListener {\r\n  \r\n  @EventSubscriber\r\n  public void onReadyEvent(ReadyEvent event) { //This method is called when the ReadyEvent is dispatched\r\n    foo();\r\n  }\r\n  \r\n  public void onMessageReceivedEvent(MessageReceivedEvent event) { //This method is NOT called because it doesn't have the @EventSubscriber annotation\r\n    bar();\r\n  }\r\n}\r\n```\r\n\r\nRegistering your listener:\r\n```java\r\npublic class Main {\r\n  \r\n  public static void main(String[] args) {\r\n    IDiscordClient client = Example.getClient(args[0], args[1], true); //Gets the client object (from the first example)\r\n    EventDispatcher dispatcher = client.getDispatcher(); //Gets the EventDispatcher instance for this client instance\r\n    dispatcher.registerListener(new InterfaceListener()); //Registers the IListener example class from above\r\n    dispatcher.registerListener(new AnnotationListener()); //Registers the @EventSubscriber example class from above\r\n  }\r\n}\r\n```\r\n\r\n### More examples\r\nSee the [examples directory](https://github.com/austinv11/Discord4J/tree/master/src/test/java/sx/blah/discord/examples).\r\n\r\n## Deprecation policy\r\nDue to the nature of the discord api, any deprecations found in the api should not be expected to last past the current version. Meaning that if a method is deprecated on version 2.1.0, do not assume the method will be available in version 2.2.0.\r\n\r\n## Development\r\nThe Discord API is still in development. Functions may break at any time.  \r\nIn such an event, please contact me or submit a pull request.\r\n\r\n## Pull requests\r\nNo one is perfect at programming and I am no exception. If you see something that can be improved, please read the [contributing guildelines](https://github.com/austinv11/Discord4J/blob/master/.github/CONTRIBUTING.md) and feel free to submit a pull request! \r\n\r\n## Other info\r\nMore information can be found in the [docs](http://austinv11.github.io/Discord4J/docs.html). \r\nYou can contact me on the [Discord API server](https://discord.gg/0SBTUU1wZTU7PCok) in the #java_discord4j channel.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}